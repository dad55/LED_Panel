/**
 ******************************************************************************
 * @file    main.c
 * @author  Ac6
 * @version V1.0
 * @date    01-December-2013
 * @brief   Default main function.
 ******************************************************************************
 */

#include "stm32f4xx.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#include "../../MATLAB/alphabet_matrix.txt"
//include "../../MATLAB/image_tableau.txt"


#define couleur_R (couleur[0])
#define couleur_G (couleur[1])
#define couleur_B (couleur[2])

#include "defines.h"
#include "tm_stm32f4_fatfs.h"


#define NB_PANNEAU_LARGEUR 2
#define NB_PANNEAU_HAUTEUR 3

#define RD1 GPIOF, GPIO_Pin_1
#define GD1 GPIOF, GPIO_Pin_2
#define BD1 GPIOF, GPIO_Pin_3
#define RD2 GPIOF, GPIO_Pin_4
#define GD2 GPIOF, GPIO_Pin_5
#define BD2 GPIOF, GPIO_Pin_6
//#define A   GPIOF, GPIO_Pin_7
//#define B   GPIOF, GPIO_Pin_8
//#define C   GPIOF, GPIO_Pin_9
#define CLK GPIOF, GPIO_Pin_10
#define LAT GPIOC, GPIO_Pin_1
#define OEB GPIOC, GPIO_Pin_0

#define wait for(int cpt=0;cpt<100;cpt++);

void change_format_image(uint8_t (*new_struct_couleur)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],uint8_t (*couleur)[/*NB_PANNEAU_HAUTEUR**/NB_PANNEAU_LARGEUR*32]);
int load_frame(uint16_t *frame,uint8_t (*rouge)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],uint8_t (*vert)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],uint8_t (*bleu)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64]);
uint8_t string2frame(uint8_t (*rouge)[NB_PANNEAU_LARGEUR*32],uint8_t (*vert)[NB_PANNEAU_LARGEUR*32],uint8_t (*bleu)[NB_PANNEAU_LARGEUR*32], char* texte,uint8_t index_lettre,uint8_t index_led);
void initAllPeriph(void);

/*
 * Interruption permettant de gérer le DMX
 * Elle est lancée chaque fois qu'un canal est reçu
 */
volatile char canal_DMX[513];
volatile int cnt_DMX=0;
volatile int BRIGHTNESS = 20,en_load_frame=0,texte_rouge,texte_vert,texte_bleu;
void USART2_IRQHandler(void)
{
	if(USART2->SR & 2) { //framing error
		cnt_DMX=-1;
		USART2->SR &= ~USART_SR_FE;
	}
	if(USART_GetITStatus(USART2,USART_IT_RXNE)){ //trame received
		canal_DMX[cnt_DMX] = USART2->DR;
		cnt_DMX++;
		if(cnt_DMX == 512){
			BRIGHTNESS = ((canal_DMX[4]-5)>>1)*NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64/128; //permet de contrôler la luminosité sur le canal 4
			//if(BRIGHTNESS > 128) BRIGHTNESS = 0;
			texte_rouge = canal_DMX[1]; //gère la qtité de couleur rouge du texte
			texte_vert = canal_DMX[2]; //gère la qtité de couleur verte du texte
			texte_bleu = canal_DMX[3]; //gère la qtité de couleur bleu du texte
			//en_load_frame = 1;
		}
		if(cnt_DMX>512) {
			cnt_DMX = 513;
		}
		USART2->SR &= ~USART_SR_RXNE ;
	}
}

/*
 * Interruption qui est lancée toute les 10ms
 * Permet de gérer le défilement du texte
 */
volatile int systick_cnt = 0;
volatile int cpt_led=0,cpt_lettre,fin_texte=0;
volatile int cnt_strobe=0,max_strobe=10;
void SysTick_Handler(void){
//void TM_DELAY_1msHandler(void){
	if(++cnt_strobe >= max_strobe) cnt_strobe=0;
	if(systick_cnt == 10){
		systick_cnt = 0;
		if(cpt_led==5){
			cpt_led=0;
			cpt_lettre++;
			if(fin_texte){
				fin_texte=0;
				cpt_lettre = 0;
			}
		}
		cpt_led++;
		en_load_frame = 1;
	}
	systick_cnt++;
}
uint8_t couleur[3][NB_PANNEAU_HAUTEUR*16][NB_PANNEAU_LARGEUR*32];
uint8_t new_struct_couleur_R[8][NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],new_struct_couleur_G[8][NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],new_struct_couleur_B[8][NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64];
uint8_t test_R[NB_PANNEAU_HAUTEUR*16][NB_PANNEAU_LARGEUR*32],test_G[NB_PANNEAU_HAUTEUR*16][NB_PANNEAU_LARGEUR*32],test_B[NB_PANNEAU_HAUTEUR*16][NB_PANNEAU_LARGEUR*32];
volatile uint16_t frame[5000*NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR];

int main(void)
{
    FATFS FatFs;
    FIL fil;
    uint br,cpt;
    char filename[10];

	initAllPeriph();
	while(1){
		for(cpt=1;cpt<=194;cpt++){
			sprintf(filename,"1_%d",cpt);
			if (f_mount(&FatFs, "", 1) == FR_OK) {
				if (f_open(&fil, filename, FA_READ) == FR_OK) {
					f_read(&fil,couleur,f_size(&fil),&br);
					f_close(&fil);
				}
				f_mount(0, "", 1);
			}
			change_format_image(new_struct_couleur_R,couleur_R);
			change_format_image(new_struct_couleur_G,couleur_G);
			change_format_image(new_struct_couleur_B,couleur_B);
			load_frame(frame,new_struct_couleur_R,new_struct_couleur_G,new_struct_couleur_B);
			IWDG_ReloadCounter();
		}
	}
	do{
		IWDG_ReloadCounter();
		//charge une image dans la RAM quand une des interruption le demande
		if(en_load_frame & 0){
			fin_texte = string2frame(test_R,test_G,test_B,"         ENFOIROS",cpt_lettre,cpt_led);
			change_format_image((uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_R,(uint8_t (*)[NB_PANNEAU_LARGEUR/**NB_PANNEAU_HAUTEUR*/*32])test_R);
			change_format_image((uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_G,(uint8_t (*)[NB_PANNEAU_LARGEUR/**NB_PANNEAU_HAUTEUR*/*32])test_G);
			change_format_image((uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_B,(uint8_t (*)[NB_PANNEAU_LARGEUR/**NB_PANNEAU_HAUTEUR*/*32])test_B);
			load_frame((uint16_t *)frame,(uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_R,(uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_G,(uint8_t (*)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64])new_struct_couleur_B);
			en_load_frame = 0;
		}
	}while(1);
}
/*
 * Change le format d'une image qui est visible en une image facilement interprétable
 * par les panneaux P10
 */
void change_format_image(uint8_t (*new_struct_couleur)[NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64], uint8_t(*couleur)[NB_PANNEAU_LARGEUR/**NB_PANNEAU_HAUTEUR*/*32]){
	int num_panneau, num_panneau_ligne, num_panneau_colonne;
	int i,j,j_prov;
	int cpt_inter1, cpt_inter2;

	for(i=0;i<4;i++){
		for(j=0;j<NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR*64/8;j++){
			num_panneau = j/8;
			num_panneau_ligne = num_panneau / NB_PANNEAU_LARGEUR;
			num_panneau_colonne = num_panneau % NB_PANNEAU_LARGEUR;
			if(num_panneau_ligne % 2 == 0){ //ligne 0..2..4 lignes allant de gauche à droite et de haut en bas
				cpt_inter2 = j*8;
				j_prov = j%(8*NB_PANNEAU_LARGEUR); //correspond au j s'il n'y avait qu'une seule ligne
				cpt_inter1 = (j_prov>>1)<<3;
				if(j%2 == 0){
					new_struct_couleur[i][cpt_inter2  ] = couleur[4+i+num_panneau_ligne*16][cpt_inter1  ]; //R1 est complété
					new_struct_couleur[i][cpt_inter2+1] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+1];
					new_struct_couleur[i][cpt_inter2+2] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+2];
					new_struct_couleur[i][cpt_inter2+3] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+3];
					new_struct_couleur[i][cpt_inter2+4] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+4];
					new_struct_couleur[i][cpt_inter2+5] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+5];
					new_struct_couleur[i][cpt_inter2+6] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+6];
					new_struct_couleur[i][cpt_inter2+7] = couleur[4+i+num_panneau_ligne*16][cpt_inter1+7];

					new_struct_couleur[i+4][cpt_inter2] =   couleur[12+i+num_panneau_ligne*16][cpt_inter1  ]; //R2 est complété
					new_struct_couleur[i+4][cpt_inter2+1] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+1];
					new_struct_couleur[i+4][cpt_inter2+2] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+2];
					new_struct_couleur[i+4][cpt_inter2+3] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+3];
					new_struct_couleur[i+4][cpt_inter2+4] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+4];
					new_struct_couleur[i+4][cpt_inter2+5] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+5];
					new_struct_couleur[i+4][cpt_inter2+6] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+6];
					new_struct_couleur[i+4][cpt_inter2+7] = couleur[12+i+num_panneau_ligne*16][cpt_inter1+7];
				}
				else{
					new_struct_couleur[i][cpt_inter2  ] = couleur[0+i+num_panneau_ligne*16][cpt_inter1  ]; //R1 est complété
					new_struct_couleur[i][cpt_inter2+1] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+1];
					new_struct_couleur[i][cpt_inter2+2] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+2];
					new_struct_couleur[i][cpt_inter2+3] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+3];
					new_struct_couleur[i][cpt_inter2+4] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+4];
					new_struct_couleur[i][cpt_inter2+5] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+5];
					new_struct_couleur[i][cpt_inter2+6] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+6];
					new_struct_couleur[i][cpt_inter2+7] = couleur[0+i+num_panneau_ligne*16][cpt_inter1+7];

					new_struct_couleur[i+4][cpt_inter2] =   couleur[8+i+num_panneau_ligne*16][cpt_inter1  ]; //R2 est complété
					new_struct_couleur[i+4][cpt_inter2+1] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+1];
					new_struct_couleur[i+4][cpt_inter2+2] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+2];
					new_struct_couleur[i+4][cpt_inter2+3] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+3];
					new_struct_couleur[i+4][cpt_inter2+4] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+4];
					new_struct_couleur[i+4][cpt_inter2+5] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+5];
					new_struct_couleur[i+4][cpt_inter2+6] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+6];
					new_struct_couleur[i+4][cpt_inter2+7] = couleur[8+i+num_panneau_ligne*16][cpt_inter1+7];
				}
			}
			else{ //lignes 1..3..5 lignes allant de droite à gauche et de bas en haut
				cpt_inter2 = j*8;
				j_prov = j%(8*NB_PANNEAU_LARGEUR); //correspond au j s'il y avait qu'une seule ligne
				cpt_inter1 = (((8*(NB_PANNEAU_LARGEUR) - j_prov + 1)>>1)<<3)-1 ;
				if(j%2 == 0){
					new_struct_couleur[i][cpt_inter2  ] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1  ]; //R1
					new_struct_couleur[i][cpt_inter2+1] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-1];
					new_struct_couleur[i][cpt_inter2+2] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-2];
					new_struct_couleur[i][cpt_inter2+3] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-3];
					new_struct_couleur[i][cpt_inter2+4] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-4];
					new_struct_couleur[i][cpt_inter2+5] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-5];
					new_struct_couleur[i][cpt_inter2+6] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-6];
					new_struct_couleur[i][cpt_inter2+7] = couleur[(num_panneau_ligne+1)*16-1-i-4][cpt_inter1-7];

					new_struct_couleur[i+4][cpt_inter2  ] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1  ]; //R2
					new_struct_couleur[i+4][cpt_inter2+1] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-1];
					new_struct_couleur[i+4][cpt_inter2+2] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-2];
					new_struct_couleur[i+4][cpt_inter2+3] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-3];
					new_struct_couleur[i+4][cpt_inter2+4] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-4];
					new_struct_couleur[i+4][cpt_inter2+5] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-5];
					new_struct_couleur[i+4][cpt_inter2+6] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-6];
					new_struct_couleur[i+4][cpt_inter2+7] = couleur[(num_panneau_ligne+1)*16-1-i-12][cpt_inter1-7];
				}
				else{
					new_struct_couleur[i][cpt_inter2  ] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1  ]; //R1
					new_struct_couleur[i][cpt_inter2+1] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-1];
					new_struct_couleur[i][cpt_inter2+2] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-2];
					new_struct_couleur[i][cpt_inter2+3] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-3];
					new_struct_couleur[i][cpt_inter2+4] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-4];
					new_struct_couleur[i][cpt_inter2+5] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-5];
					new_struct_couleur[i][cpt_inter2+6] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-6];
					new_struct_couleur[i][cpt_inter2+7] = couleur[(num_panneau_ligne+1)*16-1-i-0][cpt_inter1-7];

					new_struct_couleur[i+4][cpt_inter2  ] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1  ]; //R2
					new_struct_couleur[i+4][cpt_inter2+1] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-1];
					new_struct_couleur[i+4][cpt_inter2+2] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-2];
					new_struct_couleur[i+4][cpt_inter2+3] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-3];
					new_struct_couleur[i+4][cpt_inter2+4] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-4];
					new_struct_couleur[i+4][cpt_inter2+5] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-5];
					new_struct_couleur[i+4][cpt_inter2+6] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-6];
					new_struct_couleur[i+4][cpt_inter2+7] = couleur[(num_panneau_ligne+1)*16-1-i-8][cpt_inter1-7];
				}
			}
		}
	}
}

/*
 * Charge la RAM avec les valeurs qui permettront de commander les panneaux P10 correctement
 */
int load_frame(uint16_t *frame,uint8_t (*rouge)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],uint8_t (*vert)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64],uint8_t (*bleu)[NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64]){
	int cpt_addr=0,cnt,cpt,rep_ligne;
	uint8_t b_R1,b_R2,b_G1,b_G2,b_B1,b_B2,b_oe,b_clk,b_lat,b_A,b_B;
	uint16_t frame_prov;
	uint tmp_cnt_strobe = cnt_strobe,tmp_max_strobe=max_strobe;
	b_oe = 0;

	for(rep_ligne=0;rep_ligne<=7;rep_ligne++){
		for(cnt=0;cnt<4;cnt++){
			for(cpt=0;cpt<NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64;cpt++){
				if(/*rep_ligne < 8*/tmp_cnt_strobe>=tmp_max_strobe>>1){
					if(rouge[cnt][cpt]>rep_ligne<<5) b_R1=1;
					else b_R1=0;
					if(rouge[cnt+4][cpt]>rep_ligne<<5) b_R2=1;
					else b_R2=0;
					if(vert[cnt][cpt]>rep_ligne<<5) b_G1=1;
					else b_G1=0;
					if(vert[cnt+4][cpt]>rep_ligne<<5) b_G2=1;
					else b_G2=0;
					if(bleu[cnt][cpt]>rep_ligne<<5) b_B1=1;
					else b_B1=0;
					if(bleu[cnt+4][cpt]>rep_ligne<<5) b_B2=1;
					else b_B2=0;
				}
				else{
					b_R1 = b_R2 = b_G1 = b_G2 = b_B1 = b_B2 = 0;
				}

				if(cpt==0) {b_lat=0; b_oe=0;}
				else if(cpt>BRIGHTNESS || rep_ligne >= 8) {
					b_lat=1;
					b_oe=1;
					switch(cnt){
					case 0 : b_A=0;b_B=0; break;
					case 1 : b_A=1;b_B=0; break;
					case 2 : b_A=0;b_B=1;break;
					case 3 : b_A=1;b_B=1;break;
					}
				}
				else if(cpt==NB_PANNEAU_HAUTEUR*NB_PANNEAU_LARGEUR*64-1) {b_lat=1; b_oe=1;}
				else {b_lat=0; b_oe=0;}
				frame_prov= b_R1 << 1 | b_G1 << 2 | b_B1 << 3 | b_R2 << 4 | b_G2 << 5 | b_B2 << 6 | b_A << 7 | b_B << 8 | b_oe << 11 | b_lat << 12;
				frame[cpt_addr++]=frame_prov;
				frame[cpt_addr++]= frame_prov | (1<<10); //CLK
			}
		}
	}
	return cpt_addr;
	/* -----MEMO--------
#define RD1 GPIOF, GPIO_Pin_1
#define GD1 GPIOF, GPIO_Pin_2
#define BD1 GPIOF, GPIO_Pin_3
#define RD2 GPIOF, GPIO_Pin_4
#define GD2 GPIOF, GPIO_Pin_5
#define BD2 GPIOF, GPIO_Pin_6
#define A   GPIOF, GPIO_Pin_7
#define B   GPIOF, GPIO_Pin_8
#define C   GPIOF, GPIO_Pin_9
#define CLK GPIOF, GPIO_Pin_10
#define LAT GPIOC, GPIO_Pin_1 maintenant en F12
#define OEB GPIOC, GPIO_Pin_0 maintenant en F11
	 */
}
/*
fonction permettant de transformer une chaine de caractère en une image
On spécifie le caractère de debut, ainsi que le decalage de colonne souhaité pour la
première lettre
cette fonciton return 1 quand le caractère à afficher est '\0'
 */
uint8_t string2frame(uint8_t (*rouge)[NB_PANNEAU_LARGEUR*32],uint8_t (*vert)[NB_PANNEAU_LARGEUR*32],uint8_t (*bleu)[NB_PANNEAU_LARGEUR*32], char* texte, uint8_t index_lettre, uint8_t index_led){
	int cpt_texte=0; //,size_texte;
	int cpt1,cpt2;
	for(cpt1=0;cpt1<16;cpt1++){
		for(cpt2=0;cpt2<64;cpt2++){
			rouge[cpt1][cpt2] = vert[cpt1][cpt2] = bleu[cpt1][cpt2] = 0;
		}
	}
	uint8_t (*letter_matrix)[5];
	if(texte[index_lettre] == '\0') return 1;
	while(texte[cpt_texte + index_lettre]!='\0' && cpt_texte < 10){
		//Chargement de la matrice correspondant à la lettre
		switch(texte[cpt_texte + index_lettre]){
		case 'A' : letter_matrix = A; break;
		case 'B' : letter_matrix = B; break;
		case 'C' : letter_matrix = C; break;
		case 'D' : letter_matrix = D; break;
		case 'E' : letter_matrix = E; break;
		case 'F' : letter_matrix = F; break;
		case 'G' : letter_matrix = G; break;
		case 'H' : letter_matrix = H; break;
		case 'I' : letter_matrix = I; break;
		case 'J' : letter_matrix = J; break;
		case 'K' : letter_matrix = K; break;
		case 'L' : letter_matrix = L; break;
		case 'M' : letter_matrix = M; break;
		case 'N' : letter_matrix = N; break;
		case 'O' : letter_matrix = O; break;
		case 'P' : letter_matrix = P; break;
		case 'Q' : letter_matrix = Q; break;
		case 'R' : letter_matrix = R; break;
		case 'S' : letter_matrix = S; break;
		case 'T' : letter_matrix = T; break;
		case 'U' : letter_matrix = U; break;
		case 'V' : letter_matrix = V; break;
		case 'W' : letter_matrix = W; break;
		case 'X' : letter_matrix = X; break;
		case 'Y' : letter_matrix = Y; break;
		case 'Z' : letter_matrix = Z; break;
		case ' ' : letter_matrix = espace; break;
		}
		//Gère le placement des lettres dans la frame
		//
		if(cpt_texte == 0){
			for(cpt2=index_led;cpt2<5;cpt2++){
				for(cpt1=0;cpt1<7;cpt1++){
					rouge[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_rouge / 255;
					vert[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_vert / 255;
					bleu[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_bleu / 255;
				}
			}
		}
		else{
			for(cpt2=0;cpt2<5;cpt2++){
				for(cpt1=0;cpt1<7;cpt1++){
					rouge[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_rouge / 256;
					vert[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_vert / 256;
					bleu[cpt1+4][cpt2+cpt_texte*6+1-index_led] = letter_matrix[cpt1][cpt2] * texte_bleu / 256;
				}
			}
		}
		cpt_texte++;
	}
	return 0;
}

void initAllPeriph(void){

	//Initialisation du WatchDog
	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
	IWDG_SetPrescaler(IWDG_Prescaler_32); //clk à 1024 Hz
	IWDG_SetReload(4095); //Reset après 4 sec
	IWDG_ReloadCounter();
	IWDG_WriteAccessCmd(IWDG_WriteAccess_Disable);
	IWDG_Enable();

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

	///////config of Systick to every 10 ms (100Hz)
	SysTick_Config(SystemCoreClock/100);

	GPIO_InitTypeDef test;
	test.GPIO_Pin = GPIO_Pin_0;
	test.GPIO_Mode = GPIO_Mode_OUT;
	test.GPIO_OType = GPIO_OType_PP;
	GPIO_Init(GPIOC,&test);

	////////////INIT GPIO
	GPIO_InitTypeDef gpioInitStruct;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
	gpioInitStruct.GPIO_Mode = GPIO_Mode_OUT;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	gpioInitStruct.GPIO_OType = GPIO_OType_PP;
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOF, &gpioInitStruct);

	/*Clk */
	//gpioInitStruct.GPIO_Pin = GPIO_Pin_10;
	//gpioInitStruct.GPIO_Mode = GPIO_Mode_AF;
	//gpioInitStruct.GPIO_OType = GPIO_OType_PP;
	//gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
	//gpioInitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	//GPIO_Init(GPIOF, &gpioInitStruct);
	//GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_TIM8);

	////////////INIT USART 2
	gpioInitStruct.GPIO_Mode = GPIO_Mode_AF;
	gpioInitStruct.GPIO_OType = GPIO_OType_PP;
	gpioInitStruct.GPIO_Pin = GPIO_Pin_3;
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&gpioInitStruct);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);

	USART_InitTypeDef USART_InitStruct;
	USART_InitStruct.USART_BaudRate = 250000;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStruct.USART_Mode = USART_Mode_Rx;
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_2;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2,&USART_InitStruct);

	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	USART_Cmd(USART2,ENABLE);
	////////////////////////////

	int i,j,k;

	change_format_image(new_struct_couleur_R,couleur_R);
	change_format_image(new_struct_couleur_G,couleur_G);
	change_format_image(new_struct_couleur_B,couleur_B);

	unsigned int size;

	size = load_frame(frame,new_struct_couleur_R,new_struct_couleur_G,new_struct_couleur_B);

	TIM_TimeBaseInitTypeDef TIM_InitStructure;
	TIM_InitStructure.TIM_ClockDivision = 0;
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_InitStructure.TIM_Period = 512 / (NB_PANNEAU_LARGEUR*NB_PANNEAU_HAUTEUR); //256
	TIM_InitStructure.TIM_Prescaler =0;
	TIM_InitStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM8,&TIM_InitStructure);
	TIM_ARRPreloadConfig(TIM8, ENABLE);

	//TIM_OCInitTypeDef  TIM_OCInitStructure;
	//TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	//TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	//TIM_OCInitStructure.TIM_Pulse = 2;
	//TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;

	//TIM_OC1Init(TIM8, &TIM_OCInitStructure);
	//TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);


	DMA_InitTypeDef DMA_InitStructure;
	DMA_InitStructure.DMA_Channel = DMA_Channel_7;
	DMA_InitStructure.DMA_BufferSize = size;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)frame;
	DMA_InitStructure.DMA_MemoryBurst = DMA_PeripheralBurst_Single;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord ;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(GPIOF->ODR);
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable ;
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
	//DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_3QuartersFull;
	//DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;

	DMA_Init(DMA2_Stream1, &DMA_InitStructure);

	//TIM_DMACmd(TIM8, TIM_DMA_CC1, ENABLE);
	TIM_ITConfig(TIM8, TIM_IT_Update, ENABLE);
	TIM_DMACmd(TIM8, TIM_DMA_Update, ENABLE);
	TIM_Cmd(TIM8,ENABLE);
	//TIM_CtrlPWMOutputs(TIM8, ENABLE);
	//DMA_ITConfig(DMA2_Stream1,DMA_IT_TC,ENABLE);
	DMA_Cmd(DMA2_Stream1, ENABLE);
}
